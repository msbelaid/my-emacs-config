#+TITLE: My emacs init file!
#+AUTHOR: BELAID Mohammed Said
#+EMAIL: said.belaid@univ-usto.dz

* Try
  Helps trying new packages w/o installing them!
  #+BEGIN_SRC emacs-lisp    
    (use-package try
      :ensure t)
  #+END_SRC
* Interface / Themes
** Main theme
   Was using tango, tandotango... for now zenburn is the best
   #+BEGIN_SRC emacs-lisp
     ;;(load-theme 'tango-dark)
     (use-package zenburn-theme
       :ensure t
       :config (load-theme 'zenburn t))
   #+END_SRC
** Add some awesome transparency ;)
   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
     (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
   #+END_SRC
** No action bars
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (toggle-scroll-bar -1)
   #+END_SRC
** Highlight current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
     ;; and change the default color!
     (set-face-background 'hl-line "#3e4446")
     (set-face-foreground 'highlight nil)
   #+END_SRC
** Beacon
   Flashes the cursor line when moving the point (from a window to another, or when scrolling)
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :config
       (beacon-mode 1))
   #+END_SRC
** Shrink/Enlarge Windows
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-<down>") 'shrink-window)
     (global-set-key (kbd "S-C-<up>") 'enlarge-window)
   #+END_SRC
** Golden ration for multiple windows
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :ensure t
       :init (golden-ratio-mode 1))
   #+END_SRC
** A nice writing environment
   #+BEGIN_SRC emacs-lisp
     (use-package olivetti
       :ensure t)
   #+END_SRC
** Pretty icons
   Install the icons font
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t
       :defer 0.5
       :config
       (when (not (member "all-the-icons" (font-family-list)))
	 (all-the-icons-install-fonts t)))

     (use-package all-the-icons-ivy
       :ensure t
       :defer 0.5
       :after (all-the-icons ivy)
       :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
       :config (all-the-icons-ivy-setup))
   #+end_src
** TODO Highlight indentation
* Key-Bindings
** ~C-c i~ to open this config file 
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c i") 'my-init-file)
    (defun my-init-file ()
      "Open my configuration file"
      (interactive)
      (find-file "~/.emacs.d/myinit.org"))
  #+end_src
** ~C-c o~ to open my todo file 
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c o") 'my-todo-file)
    (defun my-todo-file ()
      "Open my todo file"
      (interactive)
      (progn
	(find-file "~/todo.org")
	(olivetti-mode)
	)
      )
  #+end_src
* Helpers
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC
** Y/N instead of Yes/No
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
* Auto-complete / Ckeck
** MiniBuffer
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
        :map ivy-minibuffer-map
        ("M-y" . ivy-next-line)))

     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))

     (use-package swiper
       :ensure t
       :bind (("C-s" . swiper-isearch)
              ("C-r" . swiper-isearch)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file))
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq ivy-display-style 'fancy)
         (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
         ))
   #+END_SRC
** Global
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         ))
   #+END_SRC
** Yasnippet
   A template system for programming languages
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config (yas-global-mode 1))
   #+END_SRC
** TODO Abbreviation
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC
** 
* Checkers
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t)
       (add-hook 'after-init-hook #'global-flycheck-mode)
       (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
       )
   #+END_SRC
** TODO languagetool
   [[https://github.com/mhayashi1120/Emacs-langtool/][languagetool]]
* Editing
** Smart parentheses
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :init
       (smartparens-global-mode))
   #+END_SRC
** Hungry delete
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
   #+END_SRC
** Write over a selection
   By default, emacs doesn't allow writing over a selected region
   #+BEGIN_SRC emacs-lisp
     (pending-delete-mode t)
   #+END_SRC
** Iedit
   Edit multiple similar regions at the same time using ~C-;~ 
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)
   #+END_SRC
** Expand region 
   This alows to select regions by expanding the selection ~C-=~
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config 
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
* Coding
** General
   Use ~M-.~ to find the definition of the methof at the point.
   #+BEGIN_src emacs-lisp
     (use-package ggtags :ensure t)
     (add-hook 'c-mode-common-hook
	       (lambda ()
		 (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		   (ggtags-mode 1))))
   #+END_src
** C++
   #+begin_src emacs-lisp

   #+end_src
** Java
** Python
* Org-mode
** Awesome Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t)
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC
** Awesome code in org-mode
   Display code in org-mode with syntax highlighting.
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC
** Exportation
*** Latex
    #+begin_src emacs-lisp
      (require 'ox-latex)
    #+end_src
**** Inline latex preview bigger
     #+BEGIN_src emacs-lisp
       (custom-set-variables
	'(org-format-latex-options
	  (quote
	   (:foreground default
			:background default
			:scale 4.0
			:html-foreground "Black"
			:html-background "Transparent"
			:html-scale 1.0
			:matchers ("begin" "$1" "$" "$$" "\\(" "\\["))))
       )
     #+END_src
**** Listings for beautiful code
     #+BEGIN_src emacs-lisp
       (setq org-latex-listings t)
       (add-to-list 'org-latex-packages-alist '("" "listings"))
       (add-to-list 'org-latex-packages-alist '("" "color"))

     #+END_src
*** Reveal
    #+BEGIN_SRC emacs-lisp
      (use-package org-re-reveal
         :ensure t)
    #+END_SRC
**** TODO Install reveal.js
*** Bootstrap
    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs
        :ensure t)
    #+END_SRC
*** TODO Book
*** TODO HTML templates
** Babel
   Execute code in org-mode!
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((gnuplot . t)
        (ditaa . t)
        (plantuml . t)
        (java . t)
        (shell . t)
        (C . t)))
   #+END_SRC
*** TODO Plantuml config
    #+BEGIN_SRC emacs-lisp
      (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
      ;; Do not promt for plantuml or ditaa
      (defun my-org-confirm-babel-evaluate (lang body)
        (not (or (string= lang "plantuml") (string= lang "ditaa"))))
      (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
      ;; Display images after evaluation
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    #+END_SRC
*** Avoid ispelling source blocks
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'ispell-skip-region-alist '("~" "~"))
      (add-to-list 'ispell-skip-region-alist '("=" "="))
      (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
    #+END_SRC
**** 
** Agenda
   #+BEGIN_src emacs-lisp
     (setq org-agenda-files (list "~/todo.org"))
   #+END_src
** Capture
** Block tempaltes ~<s~
   In recent org mode version ( > 9.2) expanding ~<s~ to a source
   block by hitting ~TAB~ is no more supported.
   Consider using ~org-tempo~ to continue using this option.

   I added another shortcut ~<S~ to create an ~emacs-lisp~ source block.
    #+BEGIN_SRC emacs-lisp
      (if (version<= "9.2" org-version)
	  (require 'org-tempo))
      (add-to-list 'org-structure-template-alist
		   (if (version< org-version "9.2")
		       (list "S" "#+BEGIN_SRC emacs-lisp\n\?\n#+END_NOTES")
		       (cons "S" "src emacs-lisp")))
    #+END_SRC
* Versionning
** Magit
   The best git _software_ ever
   #+BEGIN_SRC emacs-lisp
     (use-package  magit
       :ensure t)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
* Misc
** Stop the annoying 'error' sound 
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC


       (all-the-icons-ivy-setup)
